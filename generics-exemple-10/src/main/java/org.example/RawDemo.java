package org.example;

// Демонстрация низкоуровневого типа в действии.
class Gen<T> {
    T ob; // объявить объект типа Т

    // Передать конструктору ссыпку на объект типа Т.
    Gen(T о) {
        ob = о;
    }

    // Возвратить ob
    T getOb() {
        return ob;
    }
}
// Использование низкоуро вневого типа .
class RawDemo {
    public static void main(String[] args) {
        // Создать объект Gen дпя объектов Integer .
        Gen<Integer> iOb = new Gen<Integer>(88);
        // Создать объект Gen для объектов St ring .
        Gen<String> strOb = new Gen<String>("Тест обобщений");
        // Создать низкоуровневый объект Gen и предоставить ему значение DouЫe.
        Gen raw = new Gen(Double.valueOf(98.6));
        // Приведение здесь обязательно, потому что тип неизвестен.
        double d = (Double) raw.getOb();
        System.out.println("значение : " + d);
        // Использование низкоуровневого типа может стать причиной
        // генерации исключений во время выполнения.
        // Вот несколько примеров.
        // Следующее приведение вызывает ошибку во время выполнения!
//        int i = (Integer) raw.getOb(); // ошибка во время выполнения
        // Это присваивание обходит механизм безопасности типов.
        strOb = raw; // Нормально, но потенциально неправильно
//        String str = strOb.getOb() ; // ошибка во время выполнения
        // Это присваивание обходит механизм безопасности типов.
        raw = iOb; // Нормально , но потенциально неправильно
//         d = (Double) raw.getOb(); // ошибка во время выполнения
    }
}


